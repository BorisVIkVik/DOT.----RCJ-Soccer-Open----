<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\mother board v2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\mother board v2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Apr 02 16:44:59 2021
<BR><P>
<H3>Maximum Stack Usage =        528 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Robot::init() &rArr; mpu9250::initIMU(unsigned, int) &rArr; initSPI(unsigned, bool, unsigned char, unsigned short, int, int, int, int) &rArr; initPin(unsigned short, unsigned char, unsigned char, unsigned char) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[86]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">NMI_Handler</a><BR>
 <LI><a href="#[13]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">HardFault_Handler</a><BR>
 <LI><a href="#[14]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">MemManage_Handler</a><BR>
 <LI><a href="#[15]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BusFault_Handler</a><BR>
 <LI><a href="#[16]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">UsageFault_Handler</a><BR>
 <LI><a href="#[17]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">SVC_Handler</a><BR>
 <LI><a href="#[18]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">DebugMon_Handler</a><BR>
 <LI><a href="#[19]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">PendSV_Handler</a><BR>
 <LI><a href="#[1a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">SysTick_Handler</a><BR>
 <LI><a href="#[2d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[30]">CAN1_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[31]">CAN1_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2e]">CAN1_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5b]">CAN2_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5c]">CAN2_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5d]">CAN2_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5a]">CAN2_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6a]">CRYP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[69]">DCMI_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[58]">ETH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[59]">ETH_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[21]">EXTI0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[43]">EXTI15_10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[22]">EXTI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[23]">EXTI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[24]">EXTI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[25]">EXTI4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[32]">EXTI9_5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1f]">FLASH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6c]">FPU_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4b]">FSMC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6b]">HASH_RNG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3b]">I2C1_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3a]">I2C1_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3d]">I2C2_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3c]">I2C2_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[64]">I2C3_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[63]">I2C3_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5e]">OTG_FS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[45]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[66]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[68]">OTG_HS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1c]">PVD_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[20]">RCC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[44]">RTC_Alarm_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1e]">RTC_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[84]">Reset_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4c]">SDIO_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from stm32f407_spi.o(i.SPI1_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3f]">SPI2_IRQHandler</a> from stm32f407_spi.o(i.SPI2_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4e]">SPI3_IRQHandler</a> from stm32f407_spi.o(i.SPI3_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6d]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[1d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[34]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[38]">TIM3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[39]">TIM4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4d]">TIM5_IRQHandler</a> from main.o(i.TIM5_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[51]">TIM6_DAC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[52]">TIM7_IRQHandler</a> from stm32f407_sysfunc.o(i.TIM7_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[46]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[49]">TIM8_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[48]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[47]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from stm32f407_uart.o(i.UART4_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[50]">UART5_IRQHandler</a> from stm32f407_uart.o(i.UART5_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[40]">USART1_IRQHandler</a> from stm32f407_uart.o(i.USART1_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from stm32f407_uart.o(i.USART2_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[42]">USART3_IRQHandler</a> from stm32f407_uart.o(i.USART3_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[62]">USART6_IRQHandler</a> from stm32f407_uart.o(i.USART6_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[16]">UsageFault_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[82]">clb_kokoko()</a> from main.o(i._Z10clb_kokokov) referenced from main.o(i.main)
 <LI><a href="#[7a]">clb_calibIMU()</a> from main.o(i._Z12clb_calibIMUv) referenced from main.o(i.main)
 <LI><a href="#[7b]">clb_calibSmth()</a> from main.o(i._Z13clb_calibSmthv) referenced from main.o(i.main)
 <LI><a href="#[81]">clb_changeLED()</a> from main.o(i._Z13clb_changeLEDv) referenced from main.o(i.main)
 <LI><a href="#[80]">clb_decrement()</a> from main.o(i._Z13clb_decrementv) referenced from main.o(i.main)
 <LI><a href="#[7f]">clb_increment()</a> from main.o(i._Z13clb_incrementv) referenced from main.o(i.main)
 <LI><a href="#[79]">clb_calibLights()</a> from main.o(i._Z15clb_calibLightsv) referenced from main.o(i.main)
 <LI><a href="#[78]">clb_screenToMain()</a> from main.o(i._Z16clb_screenToMainv) referenced from main.o(i.main)
 <LI><a href="#[75]">clb_screenToCalib()</a> from main.o(i._Z17clb_screenToCalibv) referenced from main.o(i.main)
 <LI><a href="#[77]">clb_endLightsCalib()</a> from main.o(i._Z18clb_endLightsCalibv) referenced from main.o(i.main)
 <LI><a href="#[76]">clb_beginLightsCalib()</a> from main.o(i._Z20clb_beginLightsCalibv) referenced from main.o(i.main)
 <LI><a href="#[74]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[7c]">clb_play()</a> from main.o(i._Z8clb_playv) referenced from main.o(i.main)
 <LI><a href="#[7e]">clb_power()</a> from main.o(i._Z9clb_powerv) referenced from main.o(i.main)
 <LI><a href="#[7d]">clb_stats()</a> from main.o(i._Z9clb_statsv) referenced from main.o(i.main)
 <LI><a href="#[6f]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[72]">Button::Button()</a> from main.o(i._ZN6ButtonC1Ev) referenced from main.o(i._ZN5RobotC1Ev)
 <LI><a href="#[71]">Driver::Driver()</a> from main.o(i._ZN6DriverC1Ev) referenced from main.o(i._ZN5RobotC1Ev)
 <LI><a href="#[70]">Screen::Screen()</a> from main.o(i._ZN6ScreenC1Ev) referenced from main.o(i._ZN5RobotC1Ev)
 <LI><a href="#[73]">Command::Command()</a> from main.o(i._ZN7CommandC1Ev) referenced from main.o(i._ZN6ScreenC1Ev)
 <LI><a href="#[85]">__main</a> from __main.o(!!!main) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[83]">__sti___8_main_cpp_1b880dcc</a> from main.o(i.__sti___8_main_cpp_1b880dcc) referenced from main.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[85]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[88]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[167]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[168]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[169]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[16a]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[16b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[93]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[8d]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[16c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[170]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[171]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[172]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[173]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[174]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[175]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[176]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[177]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[178]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[179]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[98]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[180]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[181]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[182]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[183]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[184]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[185]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[186]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[187]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[89]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[188]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[90]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[92]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[189]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[94]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Robot::init() &rArr; mpu9250::initIMU(unsigned, int) &rArr; initSPI(unsigned, bool, unsigned char, unsigned short, int, int, int, int) &rArr; initPin(unsigned short, unsigned char, unsigned char, unsigned char) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[18a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[97]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[18b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[99]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[84]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))

<P><STRONG><a name="[18c]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[18d]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;unsigned&rang;(T1, short)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;int&rang;(T1, short)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;double&rang;(T1, short)
</UL>

<P><STRONG><a name="[9b]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateDrivers()
</UL>

<P><STRONG><a name="[18e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::clear()
</UL>

<P><STRONG><a name="[9d]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[191]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[138]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[9f]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[a2]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[a3]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[a5]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[74]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[196]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[197]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[198]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[a8]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[8e]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[aa]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[a]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[ab]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[91]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[ad]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[a7]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[96]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ac]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[a9]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[ae]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[19c]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[19e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[b1]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[b2]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[b5]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[b4]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[b6]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stm32f407_spi.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInterruptHandler(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stm32f407_spi.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInterruptHandler(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stm32f407_spi.o(i.SPI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInterruptHandler(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock()
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, main.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM5_IRQHandler &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(GPIO_TypeDef*, unsigned short, bool)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM7_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f407_sysfunc.o(i.TIM7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stm32f407_uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; UARTInterruptHandler(unsigned) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInterruptHandler(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stm32f407_uart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART5_IRQHandler &rArr; UARTInterruptHandler(unsigned) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInterruptHandler(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stm32f407_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; UARTInterruptHandler(unsigned) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInterruptHandler(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stm32f407_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; UARTInterruptHandler(unsigned) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInterruptHandler(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stm32f407_uart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; UARTInterruptHandler(unsigned) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInterruptHandler(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USART6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stm32f407_uart.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART6_IRQHandler &rArr; UARTInterruptHandler(unsigned) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInterruptHandler(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>clb_kokoko()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i._Z10clb_kokokov))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clb_kokoko() &rArr; clb_screenToDefault()
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_screenToDefault()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[bc]"></a>drawString(stm32f407_SSD1306&, char*, unsigned, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, main.o(i._Z10drawStringR17stm32f407_SSD1306Pcjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = drawString(stm32f407_SSD1306&, char*, unsigned, unsigned) &rArr; drawChar(stm32f407_SSD1306&, char, unsigned, unsigned) &rArr; stm32f407_SSD1306::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawChar(stm32f407_SSD1306&, char, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::print(char*, int, int)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void printTml&lang;unsigned&rang;(stm32f407_SSD1306&, T1, int, int, int)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void printTml&lang;int&rang;(stm32f407_SSD1306&, T1, int, int, int)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void printTml&lang;double&rang;(stm32f407_SSD1306&, T1, int, int, int)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::update()
</UL>

<P><STRONG><a name="[be]"></a>initButtons()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i._Z11initButtonsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = initButtons() &rArr; initPin(unsigned short, unsigned char, unsigned char, unsigned char) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(unsigned short, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[c5]"></a>tryTransmit(unsigned)</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, stm32f407_uart.o(i._Z11tryTransmitj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tryTransmit(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInterruptHandler(unsigned)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeUART(unsigned, char)
</UL>

<P><STRONG><a name="[7a]"></a>clb_calibIMU()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Z12clb_calibIMUv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c0]"></a>writeStrUART(unsigned, char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f407_uart.o(i._Z12writeStrUARTjPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = writeStrUART(unsigned, char*) &rArr; writeUART(unsigned, char) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeUART(unsigned, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::logErrors()
</UL>

<P><STRONG><a name="[f7]"></a>UARTAvailable(unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f407_uart.o(i._Z13UARTAvailablej))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateDrivers()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateVIM()
</UL>

<P><STRONG><a name="[7b]"></a>clb_calibSmth()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Z13clb_calibSmthv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[81]"></a>clb_changeLED()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i._Z13clb_changeLEDv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clb_changeLED() &rArr; invertPin(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invertPin(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[80]"></a>clb_decrement()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i._Z13clb_decrementv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[7f]"></a>clb_increment()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i._Z13clb_incrementv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[d3]"></a>symbolToIndex(char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._Z13symbolToIndexc))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawChar(stm32f407_SSD1306&, char, unsigned, unsigned)
</UL>

<P><STRONG><a name="[79]"></a>clb_calibLights()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i._Z15clb_calibLightsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clb_calibLights()
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setScreen(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[78]"></a>clb_screenToMain()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i._Z16clb_screenToMainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clb_screenToMain()
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setScreen(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[75]"></a>clb_screenToCalib()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i._Z17clb_screenToCalibv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clb_screenToCalib()
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setScreen(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[77]"></a>clb_endLightsCalib()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, main.o(i._Z18clb_endLightsCalibv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clb_endLightsCalib()
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::endLineCalibration()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b7]"></a>SPIInterruptHandler(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f407_spi.o(i._Z19SPIInterruptHandlerj))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>clb_screenToDefault()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i._Z19clb_screenToDefaultv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clb_screenToDefault()
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setScreen(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_stats()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_power()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_play()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_kokoko()
</UL>

<P><STRONG><a name="[ba]"></a>UARTInterruptHandler(unsigned)</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, stm32f407_uart.o(i._Z20UARTInterruptHandlerj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UARTInterruptHandler(unsigned) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryTransmit(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>clb_beginLightsCalib()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, main.o(i._Z20clb_beginLightsCalibv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clb_beginLightsCalib()
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::beginLineCalibration()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c7]"></a>delay(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f407_sysfunc.o(i._Z5delayj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis()
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::initIMU(unsigned, int)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::begin(unsigned char, bool)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::logError()
</UL>

<P><STRONG><a name="[c8]"></a>millis()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f407_sysfunc.o(i._Z6millisv))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::wait(unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateMenu()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::logError()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::isWorks()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::updateFromReg()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateVIM()
</UL>

<P><STRONG><a name="[b9]"></a>setPin(GPIO_TypeDef*, unsigned short, bool)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i._Z6setPinP12GPIO_TypeDeftb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setPin(GPIO_TypeDef*, unsigned short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(unsigned short, bool)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>setPin(unsigned short, bool)</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, main.o(i._Z6setPintb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setPin(unsigned short, bool) &rArr; setPin(GPIO_TypeDef*, unsigned short, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(GPIO_TypeDef*, unsigned short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::wait(unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateLine()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDs()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::writeReg(int, unsigned char)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readReg(int, int*, int)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::ssd1306_command(unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::initIMU(unsigned, int)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::stm32f407_SSD1306(unsigned, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::display()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::begin(unsigned char, bool)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, stm32f407_pin.o(i._Z7initPinP12GPIO_TypeDefthhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART(unsigned, unsigned, unsigned char, float, unsigned char, unsigned)
</UL>

<P><STRONG><a name="[bf]"></a>initPin(unsigned short, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, main.o(i._Z7initPinthhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = initPin(unsigned short, unsigned char, unsigned char, unsigned char) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDs()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initButtons()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::initIMU(unsigned, int)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::stm32f407_SSD1306(unsigned, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::begin(unsigned char, bool)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPI(unsigned, bool, unsigned char, unsigned short, int, int, int, int)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>initRCC()</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, stm32f407_sysfunc.o(i._Z7initRCCv))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStart()
</UL>

<P><STRONG><a name="[ce]"></a>initSPI(unsigned, bool, unsigned char, unsigned short, int, int, int, int)</STRONG> (Thumb, 578 bytes, Stack size 56 bytes, stm32f407_spi.o(i._Z7initSPIjbhtiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = initSPI(unsigned, bool, unsigned char, unsigned short, int, int, int, int) &rArr; initPin(unsigned short, unsigned char, unsigned char, unsigned char) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::initIMU(unsigned, int)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::begin(unsigned char, bool)
</UL>

<P><STRONG><a name="[d0]"></a>pinMode(unsigned short, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f407_adc.o(i._Z7pinModethhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pinMode(unsigned short, unsigned char, unsigned char, unsigned char) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::add(signed char)
</UL>

<P><STRONG><a name="[d2]"></a>readPin(GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i._Z7readPinP12GPIO_TypeDeft))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPin(unsigned short)
</UL>

<P><STRONG><a name="[d1]"></a>readPin(unsigned short)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, main.o(i._Z7readPint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readPin(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPin(GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateButtons()
</UL>

<P><STRONG><a name="[7c]"></a>clb_play()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i._Z8clb_playv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clb_play() &rArr; clb_screenToDefault()
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_screenToDefault()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[bd]"></a>drawChar(stm32f407_SSD1306&, char, unsigned, unsigned)</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, main.o(i._Z8drawCharR17stm32f407_SSD1306cjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = drawChar(stm32f407_SSD1306&, char, unsigned, unsigned) &rArr; stm32f407_SSD1306::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;symbolToIndex(char)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::drawPixel(short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawString(stm32f407_SSD1306&, char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[d5]"></a>initLEDs()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i._Z8initLEDsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = initLEDs() &rArr; initPin(unsigned short, unsigned char, unsigned char, unsigned char) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(unsigned short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[d6]"></a>initUART(unsigned, unsigned, unsigned char, float, unsigned char, unsigned)</STRONG> (Thumb, 904 bytes, Stack size 72 bytes, stm32f407_uart.o(i._Z8initUARTjjhfhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = initUART(unsigned, unsigned, unsigned char, float, unsigned char, unsigned) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[f4]"></a>readUART(unsigned)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f407_uart.o(i._Z8readUARTj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readUART(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateDrivers()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateVIM()
</UL>

<P><STRONG><a name="[d8]"></a>sysStart()</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, stm32f407_sysfunc.o(i._Z8sysStartv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sysStart()
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRCC()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>writeSPI(unsigned, unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f407_spi.o(i._Z8writeSPIjt))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateLine()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::writeReg(int, unsigned char)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readReg(int, int*, int)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::fastSPIwrite(unsigned char)
</UL>

<P><STRONG><a name="[7e]"></a>clb_power()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i._Z9clb_powerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clb_power() &rArr; clb_screenToDefault()
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_screenToDefault()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[7d]"></a>clb_stats()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i._Z9clb_statsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clb_stats() &rArr; clb_screenToDefault()
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_screenToDefault()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[da]"></a>invertPin(GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i._Z9invertPinP12GPIO_TypeDeft))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invertPin(unsigned short)
</UL>

<P><STRONG><a name="[c2]"></a>invertPin(unsigned short)</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, main.o(i._Z9invertPint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = invertPin(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invertPin(GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_changeLED()
</UL>

<P><STRONG><a name="[c1]"></a>writeUART(unsigned, char)</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f407_uart.o(i._Z9writeUARTjc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = writeUART(unsigned, char) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryTransmit(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrUART(unsigned, char*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::write(char*, char, char)
</UL>

<P><STRONG><a name="[db]"></a>stm32f407_SSD1306::fastSPIwrite(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32f407_ssd1306.o(i._ZN17stm32f407_SSD130612fastSPIwriteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32f407_SSD1306::fastSPIwrite(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSPI(unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::ssd1306_command(unsigned char)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::display()
</UL>

<P><STRONG><a name="[dd]"></a>stm32f407_SSD1306::ssd1306_command(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f407_ssd1306.o(i._ZN17stm32f407_SSD130615ssd1306_commandEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32f407_SSD1306::ssd1306_command(unsigned char) &rArr; setPin(unsigned short, bool) &rArr; setPin(GPIO_TypeDef*, unsigned short, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(unsigned short, bool)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::fastSPIwrite(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::display()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::invert(unsigned char)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::begin(unsigned char, bool)
</UL>

<P><STRONG><a name="[de]"></a>stm32f407_SSD1306::begin(unsigned char, bool)</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, stm32f407_ssd1306.o(i._ZN17stm32f407_SSD13065beginEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = stm32f407_SSD1306::begin(unsigned char, bool) &rArr; initSPI(unsigned, bool, unsigned char, unsigned short, int, int, int, int) &rArr; initPin(unsigned short, unsigned char, unsigned char, unsigned char) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(unsigned short, bool)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::ssd1306_command(unsigned char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPI(unsigned, bool, unsigned char, unsigned short, int, int, int, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[df]"></a>stm32f407_SSD1306::clear()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f407_ssd1306.o(i._ZN17stm32f407_SSD13065clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f407_SSD1306::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>stm32f407_SSD1306::invert(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f407_ssd1306.o(i._ZN17stm32f407_SSD13066invertEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stm32f407_SSD1306::invert(unsigned char) &rArr; stm32f407_SSD1306::ssd1306_command(unsigned char) &rArr; setPin(unsigned short, bool) &rArr; setPin(GPIO_TypeDef*, unsigned short, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::ssd1306_command(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[e2]"></a>stm32f407_SSD1306::display()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f407_ssd1306.o(i._ZN17stm32f407_SSD13067displayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stm32f407_SSD1306::display() &rArr; stm32f407_SSD1306::ssd1306_command(unsigned char) &rArr; setPin(unsigned short, bool) &rArr; setPin(GPIO_TypeDef*, unsigned short, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(unsigned short, bool)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::ssd1306_command(unsigned char)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::fastSPIwrite(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>stm32f407_SSD1306::drawPixel(short, short, unsigned short)</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, stm32f407_ssd1306.o(i._ZN17stm32f407_SSD13069drawPixelEsst))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stm32f407_SSD1306::drawPixel(short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawChar(stm32f407_SSD1306&, char, unsigned, unsigned)
</UL>

<P><STRONG><a name="[e3]"></a>stm32f407_SSD1306::stm32f407_SSD1306(unsigned, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, stm32f407_ssd1306.o(i._ZN17stm32f407_SSD1306C1Ejtttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = stm32f407_SSD1306::stm32f407_SSD1306(unsigned, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; initPin(unsigned short, unsigned char, unsigned char, unsigned char) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(unsigned short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[1a1]"></a>stm32f407_SSD1306::stm32f407_SSD1306__sub_object(unsigned, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, stm32f407_ssd1306.o(i._ZN17stm32f407_SSD1306C1Ejtttttt), UNUSED)

<P><STRONG><a name="[119]"></a>stm32f407_SSD1306::stm32f407_SSD1306()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f407_ssd1306.o(i._ZN17stm32f407_SSD1306C1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot()
</UL>

<P><STRONG><a name="[1a2]"></a>stm32f407_SSD1306::stm32f407_SSD1306__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f407_ssd1306.o(i._ZN17stm32f407_SSD1306C1Ev), UNUSED)

<P><STRONG><a name="[e4]"></a>Robot::updateLine()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(i._ZN5Robot10updateLineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Robot::updateLine() &rArr; setPin(unsigned short, bool) &rArr; setPin(GPIO_TypeDef*, unsigned short, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(unsigned short, bool)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSPI(unsigned, unsigned short)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 max2&lang;unsigned char&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::wait(unsigned)
</UL>

<P><STRONG><a name="[e6]"></a>Robot::updateMenu()</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, main.o(i._ZN5Robot10updateMenuEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Robot::updateMenu() &rArr; Display::scrollUp()
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::scrollUp()
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::wait(unsigned)
</UL>

<P><STRONG><a name="[e9]"></a>Robot::updateCells()</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, main.o(i._ZN5Robot11updateCellsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Robot::updateCells() &rArr; Robot::cell4() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell4()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell3()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell2()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell1()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::wait(unsigned)
</UL>

<P><STRONG><a name="[f0]"></a>Robot::updateButtons()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(i._ZN5Robot13updateButtonsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Robot::updateButtons() &rArr; readPin(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPin(unsigned short)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::setState(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::wait(unsigned)
</UL>

<P><STRONG><a name="[f2]"></a>Robot::updateDrivers()</STRONG> (Thumb, 388 bytes, Stack size 104 bytes, main.o(i._ZN5Robot13updateDriversEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Robot::updateDrivers() &rArr; Driver::updateFromReg()
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readUART(unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAvailable(unsigned)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 crc8&lang;int&rang;(T1*, int)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::updateFromReg()
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::wait(unsigned)
</UL>

<P><STRONG><a name="[f8]"></a>Robot::updateBallSensors()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i._ZN5Robot17updateBallSensorsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Robot::updateBallSensors() &rArr; Robot::ball2() &rArr; PL_ADC::read(signed char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::ball2()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::ball1()
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::wait(unsigned)
</UL>

<P><STRONG><a name="[c4]"></a>Robot::endLineCalibration()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._ZN5Robot18endLineCalibrationEv))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_endLightsCalib()
</UL>

<P><STRONG><a name="[c6]"></a>Robot::beginLineCalibration()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._ZN5Robot20beginLineCalibrationEv))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_beginLightsCalib()
</UL>

<P><STRONG><a name="[fb]"></a>Robot::init()</STRONG> (Thumb, 842 bytes, Stack size 56 bytes, main.o(i._ZN5Robot4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Robot::init() &rArr; mpu9250::initIMU(unsigned, int) &rArr; initSPI(unsigned, bool, unsigned char, unsigned short, int, int, int, int) &rArr; initPin(unsigned short, unsigned char, unsigned char, unsigned char) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::wait(unsigned)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDs()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(unsigned short, bool)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initButtons()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::initIMU(unsigned, int)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::PL_ADC(ADC_TypeDef*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::start()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::init()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::add(signed char)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::stm32f407_SSD1306(unsigned, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::drawPixel(short, short, unsigned short)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::display()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::invert(unsigned char)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::clear()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::begin(unsigned char, bool)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART(unsigned, unsigned, unsigned char, float, unsigned char, unsigned)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPI(unsigned, bool, unsigned char, unsigned short, int, int, int, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::init(int, char, char)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::setVelocity(int)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::setupIMU()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>Robot::wait(unsigned)</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, main.o(i._ZN5Robot4waitEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Robot::wait(unsigned) &rArr; Robot::updateIMU() &rArr; mpu9250::updateAnglesFromFIFO() &rArr; mpu9250::updateAngles(double, bool) &rArr; mpu9250::MadgwickAHRSupdateIMU(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateBallSensors()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateDrivers()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateButtons()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateCells()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateMenu()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateLine()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(unsigned short, bool)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateVIM()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateIMU()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::logErrors()
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>Robot::ball1()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i._ZN5Robot5ball1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Robot::ball1() &rArr; PL_ADC::read(signed char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::read(signed char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateBallSensors()
</UL>

<P><STRONG><a name="[fa]"></a>Robot::ball2()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i._ZN5Robot5ball2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Robot::ball2() &rArr; PL_ADC::read(signed char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::read(signed char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateBallSensors()
</UL>

<P><STRONG><a name="[ea]"></a>Robot::cell1()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, main.o(i._ZN5Robot5cell1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Robot::cell1() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::read(signed char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateCells()
</UL>

<P><STRONG><a name="[eb]"></a>Robot::cell2()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, main.o(i._ZN5Robot5cell2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Robot::cell2() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::read(signed char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateCells()
</UL>

<P><STRONG><a name="[ec]"></a>Robot::cell3()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, main.o(i._ZN5Robot5cell3Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Robot::cell3() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::read(signed char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateCells()
</UL>

<P><STRONG><a name="[ed]"></a>Robot::cell4()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, main.o(i._ZN5Robot5cell4Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Robot::cell4() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::read(signed char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateCells()
</UL>

<P><STRONG><a name="[10b]"></a>Robot::print(char*, int, int)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, main.o(i._ZN5Robot5printEPcii))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Robot::print(char*, int, int) &rArr; drawString(stm32f407_SSD1306&, char*, unsigned, unsigned) &rArr; drawChar(stm32f407_SSD1306&, char, unsigned, unsigned) &rArr; stm32f407_SSD1306::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawString(stm32f407_SSD1306&, char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>Robot::print(double, int, int, int)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, main.o(i._ZN5Robot5printEdiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Robot::print(double, int, int, int) &rArr; void printTml&lang;double&rang;(stm32f407_SSD1306&, T1, int, int, int) &rArr; char* toPrint&lang;double&rang;(T1, short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void printTml&lang;double&rang;(stm32f407_SSD1306&, T1, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>Robot::print(int, int, int, int)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, main.o(i._ZN5Robot5printEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Robot::print(int, int, int, int) &rArr; void printTml&lang;int&rang;(stm32f407_SSD1306&, T1, int, int, int) &rArr; char* toPrint&lang;int&rang;(T1, short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void printTml&lang;int&rang;(stm32f407_SSD1306&, T1, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>Robot::print(unsigned, int, int, int)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, main.o(i._ZN5Robot5printEjiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Robot::print(unsigned, int, int, int) &rArr; void printTml&lang;unsigned&rang;(stm32f407_SSD1306&, T1, int, int, int) &rArr; char* toPrint&lang;unsigned&rang;(T1, short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void printTml&lang;unsigned&rang;(stm32f407_SSD1306&, T1, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::logErrors()
</UL>

<P><STRONG><a name="[fc]"></a>Robot::setupIMU()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i._ZN5Robot8setupIMUEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Robot::setupIMU() &rArr; Robot::updateIMU() &rArr; mpu9250::updateAnglesFromFIFO() &rArr; mpu9250::updateAngles(double, bool) &rArr; mpu9250::MadgwickAHRSupdateIMU(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateIMU()
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>Robot::logErrors()</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, main.o(i._ZN5Robot9logErrorsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Robot::logErrors() &rArr; Robot::print(unsigned, int, int, int) &rArr; void printTml&lang;unsigned&rang;(stm32f407_SSD1306&, T1, int, int, int) &rArr; char* toPrint&lang;unsigned&rang;(T1, short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrUART(unsigned, char*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::logError()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::print(unsigned, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::wait(unsigned)
</UL>

<P><STRONG><a name="[106]"></a>Robot::updateIMU()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i._ZN5Robot9updateIMUEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Robot::updateIMU() &rArr; mpu9250::updateAnglesFromFIFO() &rArr; mpu9250::updateAngles(double, bool) &rArr; mpu9250::MadgwickAHRSupdateIMU(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAnglesFromFIFO()
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::wait(unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::setupIMU()
</UL>

<P><STRONG><a name="[107]"></a>Robot::updateVIM()</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, main.o(i._ZN5Robot9updateVIMEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Robot::updateVIM() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readUART(unsigned)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAvailable(unsigned)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 crc8&lang;int&rang;(T1*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::wait(unsigned)
</UL>

<P><STRONG><a name="[118]"></a>Robot::Robot()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, main.o(i._ZN5RobotC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Robot::Robot() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::PL_ADC(ADC_TypeDef*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::stm32f407_SSD1306()
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_1b880dcc
</UL>

<P><STRONG><a name="[1a3]"></a>Robot::Robot__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN5RobotC1Ev), UNUSED)

<P><STRONG><a name="[f1]"></a>Button::setState(bool)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i._ZN6Button8setStateEb))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateButtons()
</UL>

<P><STRONG><a name="[72]"></a>Button::Button()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i._ZN6ButtonC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN5RobotC1Ev)
</UL>
<P><STRONG><a name="[1a4]"></a>Button::Button__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN6ButtonC1Ev), UNUSED)

<P><STRONG><a name="[11b]"></a>Driver::attemptTemp()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i._ZN6Driver11attemptTempEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Driver::attemptTemp() &rArr; Driver::write(char*, char, char) &rArr; writeUART(unsigned, char) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::write(char*, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>Driver::setVelocity(int)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, main.o(i._ZN6Driver11setVelocityEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Driver::setVelocity(int) &rArr; Driver::write(char*, char, char) &rArr; writeUART(unsigned, char) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::write(char*, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[f6]"></a>Driver::updateFromReg()</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, main.o(i._ZN6Driver13updateFromRegEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Driver::updateFromReg()
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateDrivers()
</UL>

<P><STRONG><a name="[11e]"></a>Driver::attemptVoltage()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i._ZN6Driver14attemptVoltageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Driver::attemptVoltage() &rArr; Driver::write(char*, char, char) &rArr; writeUART(unsigned, char) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::write(char*, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::logError()
</UL>

<P><STRONG><a name="[fd]"></a>Driver::init(int, char, char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._ZN6Driver4initEicc))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[11c]"></a>Driver::write(char*, char, char)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, main.o(i._ZN6Driver5writeEPccc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Driver::write(char*, char, char) &rArr; writeUART(unsigned, char) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeUART(unsigned, char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 crc8&lang;char&rang;(T1*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::attemptVoltage()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::setVelocity(int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::attemptTemp()
</UL>

<P><STRONG><a name="[120]"></a>Driver::isWorks()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i._ZN6Driver7isWorksEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Driver::isWorks()
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::logError()
</UL>

<P><STRONG><a name="[112]"></a>Driver::logError()</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, main.o(i._ZN6Driver8logErrorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Driver::logError() &rArr; Driver::attemptVoltage() &rArr; Driver::write(char*, char, char) &rArr; writeUART(unsigned, char) &rArr; tryTransmit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::isWorks()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::attemptVoltage()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::logErrors()
</UL>

<P><STRONG><a name="[71]"></a>Driver::Driver()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(i._ZN6DriverC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN5RobotC1Ev)
</UL>
<P><STRONG><a name="[1a5]"></a>Driver::Driver__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN6DriverC1Ev), UNUSED)

<P><STRONG><a name="[121]"></a>PL_ADC::waitUpdate()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f407_adc.o(i._ZN6PL_ADC10waitUpdateEv))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::read(signed char, bool)
</UL>

<P><STRONG><a name="[103]"></a>PL_ADC::add(signed char)</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f407_adc.o(i._ZN6PL_ADC3addEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = PL_ADC::add(signed char) &rArr; pinMode(unsigned short, unsigned char, unsigned char, unsigned char) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(unsigned short, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[102]"></a>PL_ADC::init()</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, stm32f407_adc.o(i._ZN6PL_ADC4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[109]"></a>PL_ADC::read(signed char, bool)</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f407_adc.o(i._ZN6PL_ADC4readEab))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PL_ADC::read(signed char, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PL_ADC::waitUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell4()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell3()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell2()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell1()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::ball2()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::ball1()
</UL>

<P><STRONG><a name="[104]"></a>PL_ADC::start()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f407_adc.o(i._ZN6PL_ADC5startEv))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[101]"></a>PL_ADC::PL_ADC(ADC_TypeDef*)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f407_adc.o(i._ZN6PL_ADCC1EP11ADC_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PL_ADC::PL_ADC(ADC_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot()
</UL>

<P><STRONG><a name="[1a6]"></a>PL_ADC::PL_ADC__sub_object(ADC_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, stm32f407_adc.o(i._ZN6PL_ADCC1EP11ADC_TypeDef), UNUSED)

<P><STRONG><a name="[70]"></a>Screen::Screen()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i._ZN6ScreenC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Screen::Screen() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN5RobotC1Ev)
</UL>
<P><STRONG><a name="[1a7]"></a>Screen::Screen__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN6ScreenC1Ev), UNUSED)

<P><STRONG><a name="[146]"></a>Command::Command(char*, void(*)())</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN7CommandC1EPcPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a8]"></a>Command::Command__sub_object(char*, void(*)())</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN7CommandC1EPcPFvvE), UNUSED)

<P><STRONG><a name="[73]"></a>Command::Command()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._ZN7CommandC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN6ScreenC1Ev)
</UL>
<P><STRONG><a name="[1a9]"></a>Command::Command__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN7CommandC1Ev), UNUSED)

<P><STRONG><a name="[147]"></a>Display::addToScreen(Command)</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, main.o(i._ZN7Display11addToScreenE7Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Display::addToScreen(Command)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>Display::update()</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, main.o(i._ZN7Display6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Display::update() &rArr; drawString(stm32f407_SSD1306&, char*, unsigned, unsigned) &rArr; drawChar(stm32f407_SSD1306&, char, unsigned, unsigned) &rArr; stm32f407_SSD1306::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawString(stm32f407_SSD1306&, char*, unsigned, unsigned)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 min2&lang;int&rang;(T1, T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>Display::scrollUp()</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, main.o(i._ZN7Display8scrollUpEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Display::scrollUp()
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateMenu()
</UL>

<P><STRONG><a name="[c3]"></a>Display::setScreen(int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN7Display9setScreenEi))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_screenToDefault()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_screenToCalib()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_screenToMain()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clb_calibLights()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>mpu9250::readFIFOsize()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu9250.o(i._ZN7mpu925012readFIFOsizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mpu9250::readFIFOsize() &rArr; mpu9250::readReg(int, int*, int) &rArr; setPin(unsigned short, bool) &rArr; setPin(GPIO_TypeDef*, unsigned short, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readReg(int, int*, int)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::convert(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAnglesFromFIFO()
</UL>

<P><STRONG><a name="[127]"></a>mpu9250::updateAngles(double, bool)</STRONG> (Thumb, 1426 bytes, Stack size 88 bytes, mpu9250.o(i._ZN7mpu925012updateAnglesEdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mpu9250::updateAngles(double, bool) &rArr; mpu9250::MadgwickAHRSupdateIMU(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readGyro()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readAcc()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::MadgwickAHRSupdateIMU(double)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis()
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAnglesFromFIFO()
</UL>

<P><STRONG><a name="[113]"></a>mpu9250::updateAnglesFromFIFO()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mpu9250.o(i._ZN7mpu925020updateAnglesFromFIFOEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mpu9250::updateAnglesFromFIFO() &rArr; mpu9250::updateAngles(double, bool) &rArr; mpu9250::MadgwickAHRSupdateIMU(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readFIFO()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readFIFOsize()
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateIMU()
</UL>

<P><STRONG><a name="[12c]"></a>mpu9250::MadgwickAHRSupdateIMU(double)</STRONG> (Thumb, 4434 bytes, Stack size 240 bytes, mpu9250.o(i._ZN7mpu925021MadgwickAHRSupdateIMUEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mpu9250::MadgwickAHRSupdateIMU(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::invSqrt(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
</UL>

<P><STRONG><a name="[126]"></a>mpu9250::convert(unsigned short, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mpu9250.o(i._ZN7mpu92507convertEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpu9250::convert(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readGyro()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readFIFO()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readAcc()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readFIFOsize()
</UL>

<P><STRONG><a name="[105]"></a>mpu9250::initIMU(unsigned, int)</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, mpu9250.o(i._ZN7mpu92507initIMUEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mpu9250::initIMU(unsigned, int) &rArr; initSPI(unsigned, bool, unsigned char, unsigned short, int, int, int, int) &rArr; initPin(unsigned short, unsigned char, unsigned char, unsigned char) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(unsigned short, bool)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::writeReg(int, unsigned char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPI(unsigned, bool, unsigned char, unsigned short, int, int, int, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
</UL>

<P><STRONG><a name="[133]"></a>mpu9250::invSqrt(float)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mpu9250.o(i._ZN7mpu92507invSqrtEf))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::MadgwickAHRSupdateIMU(double)
</UL>

<P><STRONG><a name="[12a]"></a>mpu9250::readAcc()</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, mpu9250.o(i._ZN7mpu92507readAccEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpu9250::readAcc() &rArr; mpu9250::readReg(int, int*, int) &rArr; setPin(unsigned short, bool) &rArr; setPin(GPIO_TypeDef*, unsigned short, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readReg(int, int*, int)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::convert(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
</UL>

<P><STRONG><a name="[125]"></a>mpu9250::readReg(int, int*, int)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mpu9250.o(i._ZN7mpu92507readRegEiPii))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mpu9250::readReg(int, int*, int) &rArr; setPin(unsigned short, bool) &rArr; setPin(GPIO_TypeDef*, unsigned short, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(unsigned short, bool)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSPI(unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readGyro()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readFIFO()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readAcc()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readFIFOsize()
</UL>

<P><STRONG><a name="[131]"></a>mpu9250::readFIFO()</STRONG> (Thumb, 616 bytes, Stack size 80 bytes, mpu9250.o(i._ZN7mpu92508readFIFOEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpu9250::readFIFO() &rArr; mpu9250::readReg(int, int*, int) &rArr; setPin(unsigned short, bool) &rArr; setPin(GPIO_TypeDef*, unsigned short, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readReg(int, int*, int)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::convert(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAnglesFromFIFO()
</UL>

<P><STRONG><a name="[12b]"></a>mpu9250::readGyro()</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, mpu9250.o(i._ZN7mpu92508readGyroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpu9250::readGyro() &rArr; mpu9250::readReg(int, int*, int) &rArr; setPin(unsigned short, bool) &rArr; setPin(GPIO_TypeDef*, unsigned short, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readReg(int, int*, int)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::convert(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
</UL>

<P><STRONG><a name="[135]"></a>mpu9250::writeReg(int, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mpu9250.o(i._ZN7mpu92508writeRegEih))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mpu9250::writeReg(int, unsigned char) &rArr; setPin(unsigned short, bool) &rArr; setPin(GPIO_TypeDef*, unsigned short, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(unsigned short, bool)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSPI(unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::initIMU(unsigned, int)
</UL>

<P><STRONG><a name="[136]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void printTml&lang;unsigned&rang;(stm32f407_SSD1306&, T1, int, int, int)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void printTml&lang;int&rang;(stm32f407_SSD1306&, T1, int, int, int)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void printTml&lang;double&rang;(stm32f407_SSD1306&, T1, int, int, int)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;unsigned&rang;(T1, short)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;int&rang;(T1, short)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;double&rang;(T1, short)
</UL>

<P><STRONG><a name="[137]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;unsigned&rang;(T1, short)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;int&rang;(T1, short)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;double&rang;(T1, short)
</UL>

<P><STRONG><a name="[100]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::Screen()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot()
</UL>

<P><STRONG><a name="[e7]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateMenu()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateVIM()
</UL>

<P><STRONG><a name="[12d]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
</UL>

<P><STRONG><a name="[140]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[12f]"></a>__hardfp_atan2</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
</UL>

<P><STRONG><a name="[11d]"></a>__hardfp_ceilf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::setVelocity(int)
</UL>

<P><STRONG><a name="[1aa]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[cc]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[13d]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[143]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[139]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[141]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[13a]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[144]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[13c]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[142]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[13e]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[95]"></a>main</STRONG> (Thumb, 1378 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = main &rArr; Robot::init() &rArr; mpu9250::initIMU(unsigned, int) &rArr; initSPI(unsigned, bool, unsigned char, unsigned short, int, int, int, int) &rArr; initPin(unsigned short, unsigned char, unsigned char, unsigned char) &rArr; initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::print(double, int, int, int)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::print(char*, int, int)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::wait(unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::init()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(unsigned short, unsigned char, unsigned char, unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin(unsigned short, bool)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::display()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f407_SSD1306::clear()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStart()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeStrUART(unsigned, char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::setScreen(int)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::update()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::addToScreen(Command)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Command::Command(char*, void(*)())
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::attemptTemp()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::setupIMU()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::print(unsigned, int, int, int)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::print(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[13f]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[11f]"></a>T1 crc8&lang;char&rang;(T1*, int)</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, main.o(t._Z4crc8IcET_PS0_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = T1 crc8&lang;char&rang;(T1*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver::write(char*, char, char)
</UL>

<P><STRONG><a name="[f5]"></a>T1 crc8&lang;int&rang;(T1*, int)</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, main.o(t._Z4crc8IiET_PS0_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = T1 crc8&lang;int&rang;(T1*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateDrivers()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateVIM()
</UL>

<P><STRONG><a name="[e5]"></a>T1 max2&lang;unsigned char&rang;(T1, T1)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(t._Z4max2IhET_S0_S0_))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateLine()
</UL>

<P><STRONG><a name="[123]"></a>T1 min2&lang;int&rang;(T1, T1)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(t._Z4min2IiET_S0_S0_))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::update()
</UL>

<P><STRONG><a name="[14a]"></a>char* toPrint&lang;double&rang;(T1, short)</STRONG> (Thumb, 608 bytes, Stack size 96 bytes, main.o(t._Z7toPrintIdEPcT_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = char* toPrint&lang;double&rang;(T1, short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void printTml&lang;double&rang;(stm32f407_SSD1306&, T1, int, int, int)
</UL>

<P><STRONG><a name="[14d]"></a>char* toPrint&lang;int&rang;(T1, short)</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, main.o(t._Z7toPrintIiEPcT_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = char* toPrint&lang;int&rang;(T1, short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void printTml&lang;int&rang;(stm32f407_SSD1306&, T1, int, int, int)
</UL>

<P><STRONG><a name="[14e]"></a>char* toPrint&lang;unsigned&rang;(T1, short)</STRONG> (Thumb, 488 bytes, Stack size 64 bytes, main.o(t._Z7toPrintIjEPcT_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = char* toPrint&lang;unsigned&rang;(T1, short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void printTml&lang;unsigned&rang;(stm32f407_SSD1306&, T1, int, int, int)
</UL>

<P><STRONG><a name="[10d]"></a>void printTml&lang;double&rang;(stm32f407_SSD1306&, T1, int, int, int)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, main.o(t._Z8printTmlIdEvR17stm32f407_SSD1306T_iii))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = void printTml&lang;double&rang;(stm32f407_SSD1306&, T1, int, int, int) &rArr; char* toPrint&lang;double&rang;(T1, short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawString(stm32f407_SSD1306&, char*, unsigned, unsigned)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;double&rang;(T1, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::print(double, int, int, int)
</UL>

<P><STRONG><a name="[10f]"></a>void printTml&lang;int&rang;(stm32f407_SSD1306&, T1, int, int, int)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, main.o(t._Z8printTmlIiEvR17stm32f407_SSD1306T_iii))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = void printTml&lang;int&rang;(stm32f407_SSD1306&, T1, int, int, int) &rArr; char* toPrint&lang;int&rang;(T1, short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawString(stm32f407_SSD1306&, char*, unsigned, unsigned)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;int&rang;(T1, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::print(int, int, int, int)
</UL>

<P><STRONG><a name="[111]"></a>void printTml&lang;unsigned&rang;(stm32f407_SSD1306&, T1, int, int, int)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, main.o(t._Z8printTmlIjEvR17stm32f407_SSD1306T_iii))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = void printTml&lang;unsigned&rang;(stm32f407_SSD1306&, T1, int, int, int) &rArr; char* toPrint&lang;unsigned&rang;(T1, short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawString(stm32f407_SSD1306&, char*, unsigned, unsigned)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;unsigned&rang;(T1, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::print(unsigned, int, int, int)
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::MadgwickAHRSupdateIMU(double)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;double&rang;(T1, short)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[1ab]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1ac]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1ad]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1ae]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1af]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[132]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::MadgwickAHRSupdateIMU(double)
</UL>

<P><STRONG><a name="[14f]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::MadgwickAHRSupdateIMU(double)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateVIM()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[152]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[155]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[159]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readGyro()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readFIFO()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readAcc()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;double&rang;(T1, short)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateVIM()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[157]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::MadgwickAHRSupdateIMU(double)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;double&rang;(T1, short)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateIMU()
</UL>

<P><STRONG><a name="[158]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[15b]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readGyro()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readFIFO()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readAcc()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateVIM()
</UL>

<P><STRONG><a name="[1b0]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;double&rang;(T1, short)
</UL>

<P><STRONG><a name="[1b1]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell4()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell3()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell2()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell1()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPin(GPIO_TypeDef*, unsigned short, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b2]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateCells()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;double&rang;(T1, short)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[15f]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell4()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell3()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell2()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::cell1()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::MadgwickAHRSupdateIMU(double)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;double&rang;(T1, short)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateVIM()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[15d]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[151]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[154]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
</UL>

<P><STRONG><a name="[15e]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;double&rang;(T1, short)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[160]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[149]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::updateCells()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readGyro()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readFIFO()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::readAcc()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::MadgwickAHRSupdateIMU(double)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::updateAngles(double, bool)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[162]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu9250::MadgwickAHRSupdateIMU(double)
</UL>

<P><STRONG><a name="[163]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[164]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[8c]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1b3]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1b4]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[150]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char* toPrint&lang;double&rang;(T1, short)
</UL>

<P><STRONG><a name="[165]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[156]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[145]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[166]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b8]"></a>SetSysClock()</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i._Z11SetSysClockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock()
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[83]"></a>__sti___8_main_cpp_1b880dcc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.__sti___8_main_cpp_1b880dcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __sti___8_main_cpp_1b880dcc &rArr; Robot::Robot() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot::Robot()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[cf]"></a>NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f407_spi.o(i._Z14NVIC_EnableIRQ4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPI(unsigned, bool, unsigned char, unsigned short, int, int, int, int)
</UL>

<P><STRONG><a name="[d7]"></a>NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f407_uart.o(i._Z14NVIC_EnableIRQ4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART(unsigned, unsigned, unsigned char, float, unsigned char, unsigned)
</UL>

<P><STRONG><a name="[161]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[153]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[6f]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
